{"version":3,"sources":["/Users/lukejagodzinski/workspace/usefulio/mongo/src/index.js"],"names":["client","db","connect","MongoClient","process","env","MONGO_URL","ssl","MONGO_SSL","sslValidate","MONGO_SSL_VALIDATE","MONGO_DATABASE","disconnect","close","getDatabase","getCollection","collectionName","collection","generateId","charsCount","CHARS","digits","i","bytes","crypto","randomBytes","e","pseudoRandomBytes","hexString","toString","substring","fraction","parseInt","index","Math","floor","length","substr","join"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA,IAAIA,MAAJ;AACA,IAAIC,EAAJ;AAEA;;;;;;;;AAOA,MAAMC,UAAU,YAAY;AAC1B,MAAI,CAACF,MAAL,EAAa;AACX;AACAA,aAAS,MAAMG,qBAAYD,OAAZ,CAAoBE,QAAQC,GAAR,CAAYC,SAAhC,EAA2C;AACxDC,WAAKH,QAAQC,GAAR,CAAYG,SAAZ,KAA0B,MAA1B,IAAoC,KADe;AAExDC,mBAAaL,QAAQC,GAAR,CAAYK,kBAAZ,KAAmC,MAAnC,IAA6C;AAFF,KAA3C,CAAf,CAFW,CAMX;;AACAT,SAAKD,OAAOC,EAAP,CAAUG,QAAQC,GAAR,CAAYM,cAAtB,CAAL;AACD;AACF,CAVD;AAYA;;;;;;;;;;AAMA,MAAMC,aAAa,YAAY;AAC7B,MAAIZ,MAAJ,EAAY;AACV,UAAMA,OAAOa,KAAP,EAAN;AACAb,aAAS,IAAT;AACAC,SAAK,IAAL;AACD;AACF,CAND;AAQA;;;;;;;;;;AAMA,MAAMa,cAAc,YAAY;AAC9B,MAAI,CAACd,MAAL,EAAa;AACX,UAAME,SAAN;AACD;;AACD,SAAOD,EAAP;AACD,CALD;AAOA;;;;;;;;;;AAMA,MAAMc,gBAAgB,MAAMC,cAAN,IAAwB;AAC5C,MAAI,CAAChB,MAAL,EAAa;AACX,UAAME,SAAN;AACD,GAH2C,CAI5C;;;AACA,SAAOD,GAAGgB,UAAH,CAAcD,cAAd,CAAP;AACD,CAND;AAQA;;;;;;;;;;;AAOA,MAAME,aAAa,CAACC,aAAa,EAAd,KAAqB;AACtC,QAAMC,QAAQ,yDAAd;AACA,QAAMC,SAAS,EAAf;;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,UAApB,EAAgCG,GAAhC,EAAqC;AACnC,QAAIC,KAAJ;;AACA,QAAI;AACFA,cAAQC,gBAAOC,WAAP,CAAmB,CAAnB,CAAR;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACVH,cAAQC,gBAAOG,iBAAP,CAAyB,CAAzB,CAAR;AACD;;AACD,UAAMC,YAAYL,MAAMM,QAAN,CAAe,KAAf,EAAsBC,SAAtB,CAAgC,CAAhC,EAAmC,CAAnC,CAAlB;AACA,UAAMC,WAAWC,SAASJ,SAAT,EAAoB,EAApB,IAA0B,sBAA3C;AACA,UAAMK,QAAQC,KAAKC,KAAL,CAAWJ,WAAWX,MAAMgB,MAA5B,CAAd;AACAf,WAAOC,CAAP,IAAYF,MAAMiB,MAAN,CAAaJ,KAAb,EAAoB,CAApB,CAAZ;AACD;;AACD,SAAOZ,OAAOiB,IAAP,CAAY,EAAZ,CAAP;AACD,CAhBD","sourcesContent":["import crypto from \"crypto\";\nimport { MongoClient } from \"mongodb\";\n\nlet client;\nlet db;\n\n/**\n * Connects to database using info defined in environment variables (MONGO_URL,\n * MONGO_DATABASE, MONGO_SSL, MONGO_SSL_VALIDATE).\n *\n * @async\n * @function connect\n */\nconst connect = async () => {\n  if (!client) {\n    // Connect to MongoDB server.\n    client = await MongoClient.connect(process.env.MONGO_URL, {\n      ssl: process.env.MONGO_SSL === \"true\" || false,\n      sslValidate: process.env.MONGO_SSL_VALIDATE === \"true\" || false\n    });\n    // Get database.\n    db = client.db(process.env.MONGO_DATABASE);\n  }\n};\n\n/**\n * Disconnects from database.\n *\n * @async\n * @function disconnect\n */\nconst disconnect = async () => {\n  if (client) {\n    await client.close();\n    client = null;\n    db = null;\n  }\n};\n\n/**\n * Gets database.\n *\n * @function getDatabase\n * @return {Db} MongoDB instance of the Db class.\n */\nconst getDatabase = async () => {\n  if (!client) {\n    await connect();\n  }\n  return db;\n};\n\n/**\n * Gets collection.\n *\n * @function getCollection\n * @return {Collection<TSchema>} MongoDB instance of the Collection class.\n */\nconst getCollection = async collectionName => {\n  if (!client) {\n    await connect();\n  }\n  // Get collection.\n  return db.collection(collectionName);\n};\n\n/**\n * Generates Mongo ID string compatible with Meteor Mongo IDs.\n *\n * @function generateId\n * @param {number} charsCount - Length of the Mongo ID string.\n * @return {string} Mongo ID string compatible with Meteor Mongo ID.\n */\nconst generateId = (charsCount = 17) => {\n  const CHARS = \"23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz\";\n  const digits = [];\n  for (let i = 0; i < charsCount; i++) {\n    let bytes;\n    try {\n      bytes = crypto.randomBytes(4);\n    } catch (e) {\n      bytes = crypto.pseudoRandomBytes(4);\n    }\n    const hexString = bytes.toString(\"hex\").substring(0, 8);\n    const fraction = parseInt(hexString, 16) * 2.3283064365386963e-10;\n    const index = Math.floor(fraction * CHARS.length);\n    digits[i] = CHARS.substr(index, 1);\n  }\n  return digits.join(\"\");\n};\n\nexport { connect, disconnect, getDatabase, getCollection, generateId };\n"]}